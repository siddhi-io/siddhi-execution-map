{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Execution Map The siddhi-execution-map extension is a Siddhi extension that provides capability to generate and manipulate map (key-value) data objects. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 5.0.6 . Features collect ( Aggregate Function ) Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value merge ( Aggregate Function ) Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. clear ( Function ) Function returns the cleared map. clone ( Function ) Function returns the cloned map. combineByKey ( Function ) Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. containsKey ( Function ) Function checks if the map contains the key. containsValue ( Function ) Function checks if the map contains the value. create ( Function ) Function creates a map pairing the keys and their corresponding values. createFromJSON ( Function ) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. createFromXML ( Function ) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. get ( Function ) Function returns the value corresponding to the given key from the map. isEmpty ( Function ) Function checks if the map is empty. isMap ( Function ) Function checks if the object is type of a map. keys ( Function ) Function to return the keys of the map as a list. put ( Function ) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. putAll ( Function ) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. putIfAbsent ( Function ) Function returns the updated map after adding the given key-value pair if key is absent. remove ( Function ) Function returns the updated map after removing the element with the specified key. replace ( Function ) Function returns the updated map after replacing the given key-value pair only if key is present. replaceAll ( Function ) Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. size ( Function ) Function to return the size of the map. toJSON ( Function ) Function converts a map into a JSON object and returns the JSON as a string. toXML ( Function ) Function returns the map as an XML string. values ( Function ) Function to return the values of the map. tokenize ( Stream Processor ) Tokenize the map and return each key, value as new attributes in events Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-execution-map","text":"The siddhi-execution-map extension is a Siddhi extension that provides capability to generate and manipulate map (key-value) data objects. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Execution Map"},{"location":"#download","text":"Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 5.0.6 .","title":"Latest API Docs"},{"location":"#features","text":"collect ( Aggregate Function ) Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value merge ( Aggregate Function ) Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. clear ( Function ) Function returns the cleared map. clone ( Function ) Function returns the cloned map. combineByKey ( Function ) Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. containsKey ( Function ) Function checks if the map contains the key. containsValue ( Function ) Function checks if the map contains the value. create ( Function ) Function creates a map pairing the keys and their corresponding values. createFromJSON ( Function ) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. createFromXML ( Function ) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. get ( Function ) Function returns the value corresponding to the given key from the map. isEmpty ( Function ) Function checks if the map is empty. isMap ( Function ) Function checks if the object is type of a map. keys ( Function ) Function to return the keys of the map as a list. put ( Function ) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. putAll ( Function ) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. putIfAbsent ( Function ) Function returns the updated map after adding the given key-value pair if key is absent. remove ( Function ) Function returns the updated map after removing the element with the specified key. replace ( Function ) Function returns the updated map after replacing the given key-value pair only if key is present. replaceAll ( Function ) Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. size ( Function ) Function to return the size of the map. toJSON ( Function ) Function converts a map into a JSON object and returns the JSON as a string. toXML ( Function ) Function returns the map as an XML string. values ( Function ) Function to return the values of the map. tokenize ( Stream Processor ) Tokenize the map and return each key, value as new attributes in events","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/4.0.10/","text":"API Docs - v4.0.10 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.10"},{"location":"api/4.0.10/#api-docs-v4010","text":"","title":"API Docs - v4.0.10"},{"location":"api/4.0.10/#map","text":"","title":"Map"},{"location":"api/4.0.10/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.10/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.10/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.10/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.10/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.10/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.10/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.10/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.10/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.11/","text":"API Docs - v4.0.11 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.11"},{"location":"api/4.0.11/#api-docs-v4011","text":"","title":"API Docs - v4.0.11"},{"location":"api/4.0.11/#map","text":"","title":"Map"},{"location":"api/4.0.11/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.11/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.11/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.11/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.11/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.11/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.11/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.11/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.11/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.12/","text":"API Docs - v4.0.12 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.12"},{"location":"api/4.0.12/#api-docs-v4012","text":"","title":"API Docs - v4.0.12"},{"location":"api/4.0.12/#map","text":"","title":"Map"},{"location":"api/4.0.12/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.12/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.12/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.12/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.12/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.12/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.12/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.12/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.12/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.13/","text":"API Docs - v4.0.13 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.13"},{"location":"api/4.0.13/#api-docs-v4013","text":"","title":"API Docs - v4.0.13"},{"location":"api/4.0.13/#map","text":"","title":"Map"},{"location":"api/4.0.13/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.13/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.13/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.13/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.13/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.13/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.13/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.13/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.13/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.14/","text":"API Docs - v4.0.14 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.14"},{"location":"api/4.0.14/#api-docs-v4014","text":"","title":"API Docs - v4.0.14"},{"location":"api/4.0.14/#map","text":"","title":"Map"},{"location":"api/4.0.14/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.14/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.14/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.14/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.14/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.14/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.14/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.14/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.14/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.15/","text":"API Docs - v4.0.15 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.15"},{"location":"api/4.0.15/#api-docs-v4015","text":"","title":"API Docs - v4.0.15"},{"location":"api/4.0.15/#map","text":"","title":"Map"},{"location":"api/4.0.15/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.15/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.15/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.15/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.15/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.15/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.15/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.15/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.15/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.16/","text":"API Docs - v4.0.16 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. putAll (Function) Returns the updated to.map after copying all of the mappings from the specified from.map. If you have duplicate keys, from.map will overwrite the values in to.map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map Map to which mappings needs to be copied in to. OBJECT No No from.map Map from which mappings are copied from. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) Returns the updated map named to.map after adding each mapping from from.map. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.16"},{"location":"api/4.0.16/#api-docs-v4016","text":"","title":"API Docs - v4.0.16"},{"location":"api/4.0.16/#map","text":"","title":"Map"},{"location":"api/4.0.16/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.16/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.16/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.16/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.16/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.16/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.16/#putall-function","text":"Returns the updated to.map after copying all of the mappings from the specified from.map. If you have duplicate keys, from.map will overwrite the values in to.map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map Map to which mappings needs to be copied in to. OBJECT No No from.map Map from which mappings are copied from. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) Returns the updated map named to.map after adding each mapping from from.map.","title":"putAll (Function)"},{"location":"api/4.0.16/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.16/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.16/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.17/","text":"API Docs - v4.0.17 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. putAll (Function) Returns the updated to.map after copying all of the mappings from the specified from.map. If you have duplicate keys, from.map will overwrite the values in to.map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map Map to which mappings needs to be copied in to. OBJECT No No from.map Map from which mappings are copied from. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) Returns the updated map named to.map after adding each mapping from from.map. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.17"},{"location":"api/4.0.17/#api-docs-v4017","text":"","title":"API Docs - v4.0.17"},{"location":"api/4.0.17/#map","text":"","title":"Map"},{"location":"api/4.0.17/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.17/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.17/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.17/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.17/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.17/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.17/#putall-function","text":"Returns the updated to.map after copying all of the mappings from the specified from.map. If you have duplicate keys, from.map will overwrite the values in to.map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map Map to which mappings needs to be copied in to. OBJECT No No from.map Map from which mappings are copied from. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) Returns the updated map named to.map after adding each mapping from from.map.","title":"putAll (Function)"},{"location":"api/4.0.17/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.17/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.17/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.18/","text":"API Docs - v4.0.18 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. putAll (Function) Returns the updated to.map after copying all of the mappings from the specified from.map. If you have duplicate keys, from.map will overwrite the values in to.map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map Map to which mappings needs to be copied in to. OBJECT No No from.map Map from which mappings are copied from. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) Returns the updated map named to.map after adding each mapping from from.map. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.18"},{"location":"api/4.0.18/#api-docs-v4018","text":"","title":"API Docs - v4.0.18"},{"location":"api/4.0.18/#map","text":"","title":"Map"},{"location":"api/4.0.18/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.18/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.18/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.18/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.18/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.18/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.18/#putall-function","text":"Returns the updated to.map after copying all of the mappings from the specified from.map. If you have duplicate keys, from.map will overwrite the values in to.map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map Map to which mappings needs to be copied in to. OBJECT No No from.map Map from which mappings are copied from. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) Returns the updated map named to.map after adding each mapping from from.map.","title":"putAll (Function)"},{"location":"api/4.0.18/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.18/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.18/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.19/","text":"API Docs - v4.0.19 Map create (Function) This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\". createFromJSON (Function) This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively. createFromXML (Function) This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company. isMap (Function) This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map. put (Function) This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234. putAll (Function) This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.' remove (Function) This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234. toJSON (Function) This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?. toXML (Function) This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"4.0.19"},{"location":"api/4.0.19/#api-docs-v4019","text":"","title":"API Docs - v4.0.19"},{"location":"api/4.0.19/#map","text":"","title":"Map"},{"location":"api/4.0.19/#create-function","text":"This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\".","title":"create (Function)"},{"location":"api/4.0.19/#createfromjson-function","text":"This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.19/#createfromxml-function","text":"This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.19/#get-function","text":"This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company.","title":"get (Function)"},{"location":"api/4.0.19/#ismap-function","text":"This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map.","title":"isMap (Function)"},{"location":"api/4.0.19/#put-function","text":"This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.19/#putall-function","text":"This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.'","title":"putAll (Function)"},{"location":"api/4.0.19/#remove-function","text":"This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234.","title":"remove (Function)"},{"location":"api/4.0.19/#tojson-function","text":"This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.19/#toxml-function","text":"This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"toXML (Function)"},{"location":"api/4.0.5/","text":"API Docs - v4.0.5 Map toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"4.0.5"},{"location":"api/4.0.5/#api-docs-v405","text":"","title":"API Docs - v4.0.5"},{"location":"api/4.0.5/#map","text":"","title":"Map"},{"location":"api/4.0.5/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.5/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.5/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.5/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.5/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.5/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.5/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.5/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.5/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.6/","text":"API Docs - v4.0.6 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.6"},{"location":"api/4.0.6/#api-docs-v406","text":"","title":"API Docs - v4.0.6"},{"location":"api/4.0.6/#map","text":"","title":"Map"},{"location":"api/4.0.6/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.6/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.6/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.6/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.6/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.6/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.6/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.6/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.6/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.7/","text":"API Docs - v4.0.7 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.7"},{"location":"api/4.0.7/#api-docs-v407","text":"","title":"API Docs - v4.0.7"},{"location":"api/4.0.7/#map","text":"","title":"Map"},{"location":"api/4.0.7/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.7/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.7/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.7/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.7/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.7/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.7/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.7/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.7/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.8/","text":"API Docs - v4.0.8 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.8"},{"location":"api/4.0.8/#api-docs-v408","text":"","title":"API Docs - v4.0.8"},{"location":"api/4.0.8/#map","text":"","title":"Map"},{"location":"api/4.0.8/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.8/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.8/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.8/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.8/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.8/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.8/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.8/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.8/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.0.9/","text":"API Docs - v4.0.9 Map create (Function) Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\" createFromJSON (Function) Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. createFromXML (Function) Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company. isMap (Function) Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map. put (Function) Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234. remove (Function) Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234 toJSON (Function) Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?. toXML (Function) Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"4.0.9"},{"location":"api/4.0.9/#api-docs-v409","text":"","title":"API Docs - v4.0.9"},{"location":"api/4.0.9/#map","text":"","title":"Map"},{"location":"api/4.0.9/#create-function","text":"Returns the created map object. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) returns a map with keys 1, 2, 3 and corresponding values \"one\", \"two\", \"three\"","title":"create (Function)"},{"location":"api/4.0.9/#createfromjson-function","text":"Returns the map created with the key values pairs given in the JSONstring. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.0.9/#createfromxml-function","text":"Returns the map created with the key values pairs given in the XMLstring. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string XML as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.0.9/#get-function","text":"Returns the value object from the map that is related to the given key. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map where the value should return OBJECT No No key Key of the value which needed to return OBJECT No No Examples EXAMPLE 1 get(company,1) returns the value that is related to the key 1 from the map named company.","title":"get (Function)"},{"location":"api/4.0.9/#ismap-function","text":"Returns true if the object is a map or false otherwise.t Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object Object that needs to be checked whether it is a map OBJECT No No Examples EXAMPLE 1 isMap(students) returns true if the students object is a map. It returns false if the students object is not a map.","title":"isMap (Function)"},{"location":"api/4.0.9/#put-function","text":"Returns the updated map after adding the given key-value pair Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that value should add OBJECT No No key Key of the value OBJECT No No value New value OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.0.9/#remove-function","text":"Returns the updated map after removing the element with key. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Map that needed to remove the element OBJECT No No key key of the element the needed to remove OBJECT No No Examples EXAMPLE 1 remove(students , 1234) returns the updated map students after removing the element with the key 1234","title":"remove (Function)"},{"location":"api/4.0.9/#tojson-function","text":"Converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that nedded to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company If \"company\" is a map with key value pairs (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200). This will returns the string ?{?symbol? : ?wso2? , ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.0.9/#toxml-function","text":"Returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map map that needed to convert to XML OBJECT No No rootelementname root element of the map null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key value pairs (?symbol? : wso2), (?volume? : 100), and (?price? : 200). this will returns the string ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany","title":"toXML (Function)"},{"location":"api/4.1.0/","text":"API Docs - v4.1.0 Map create (Function) This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\". createFromJSON (Function) This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively. createFromXML (Function) This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company. isMap (Function) This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map. put (Function) This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234. putAll (Function) This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.' remove (Function) This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234. toJSON (Function) This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?. toXML (Function) This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"4.1.0"},{"location":"api/4.1.0/#api-docs-v410","text":"","title":"API Docs - v4.1.0"},{"location":"api/4.1.0/#map","text":"","title":"Map"},{"location":"api/4.1.0/#create-function","text":"This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\".","title":"create (Function)"},{"location":"api/4.1.0/#createfromjson-function","text":"This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/4.1.0/#createfromxml-function","text":"This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/4.1.0/#get-function","text":"This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company.","title":"get (Function)"},{"location":"api/4.1.0/#ismap-function","text":"This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map.","title":"isMap (Function)"},{"location":"api/4.1.0/#put-function","text":"This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/4.1.0/#putall-function","text":"This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.'","title":"putAll (Function)"},{"location":"api/4.1.0/#remove-function","text":"This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234.","title":"remove (Function)"},{"location":"api/4.1.0/#tojson-function","text":"This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/4.1.0/#toxml-function","text":"This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"toXML (Function)"},{"location":"api/5.0.0/","text":"API Docs - v5.0.0 Map create (Function) This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\". createFromJSON (Function) This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively. createFromXML (Function) This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company. isMap (Function) This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map. put (Function) This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234. putAll (Function) This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.' remove (Function) This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234. toJSON (Function) This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?. toXML (Function) This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"5.0.0"},{"location":"api/5.0.0/#api-docs-v500","text":"","title":"API Docs - v5.0.0"},{"location":"api/5.0.0/#map","text":"","title":"Map"},{"location":"api/5.0.0/#create-function","text":"This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\".","title":"create (Function)"},{"location":"api/5.0.0/#createfromjson-function","text":"This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/5.0.0/#createfromxml-function","text":"This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/5.0.0/#get-function","text":"This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company.","title":"get (Function)"},{"location":"api/5.0.0/#ismap-function","text":"This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map.","title":"isMap (Function)"},{"location":"api/5.0.0/#put-function","text":"This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/5.0.0/#putall-function","text":"This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.'","title":"putAll (Function)"},{"location":"api/5.0.0/#remove-function","text":"This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234.","title":"remove (Function)"},{"location":"api/5.0.0/#tojson-function","text":"This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/5.0.0/#toxml-function","text":"This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"toXML (Function)"},{"location":"api/5.0.1/","text":"API Docs - v5.0.1 Map create (Function) This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\". createFromJSON (Function) This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively. createFromXML (Function) This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively. get (Function) This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company. isMap (Function) This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map. put (Function) This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234. putAll (Function) This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.' remove (Function) This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234. toJSON (Function) This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?. toXML (Function) This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"5.0.1"},{"location":"api/5.0.1/#api-docs-v501","text":"","title":"API Docs - v5.0.1"},{"location":"api/5.0.1/#map","text":"","title":"Map"},{"location":"api/5.0.1/#create-function","text":"This creates a map between the keys and their corresponding values. Syntax OBJECT map:create( OBJECT key1, OBJECT value1, OBJECT key2, OBJECT value2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 key 1 OBJECT No No value1 Value 1 OBJECT No No key2 Key 2 OBJECT No No value2 Value 2 OBJECT No No Examples EXAMPLE 1 create(1 , ?one? , 2 , ?two? , 3 , ?three?) This returns a map with keys 1, 2, 3 mapped with their corresponding values, \"one\", \"two\", \"three\".","title":"create (Function)"},{"location":"api/5.0.1/#createfromjson-function","text":"This returns the map created by pairing the keys with its corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) This returns a map with the keys \"symbol\", \"price\", \"volume\", and its values, \"IBM\", 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/5.0.1/#createfromxml-function","text":"This returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No No Examples EXAMPLE 1 createFromJSON(?{?symbol' : 'IBM' , 'price' : 200, 'volume' : 100}?) returns a map with the keys \"symbol\", \"price\", \"volume\", and with the values \"IBM\", 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/5.0.1/#get-function","text":"This returns the value object, that corresponds to the given key, from the map. Syntax OBJECT map:get( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained OBJECT No No key The key of the value which needs to be returned OBJECT No No Examples EXAMPLE 1 get(company,1) This function returns the value that is associated with the key, i.e., 1, from a map named company.","title":"get (Function)"},{"location":"api/5.0.1/#ismap-function","text":"This returns 'true' if the object is a map and 'false' if otherwise. Syntax BOOL map:isMap( OBJECT object) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic object The object that the function checks to determine whether it's a map or not. OBJECT No No Examples EXAMPLE 1 isMap(students) This function returns 'true' if the object, students is a map. It returns 'false' if it is not a map.","title":"isMap (Function)"},{"location":"api/5.0.1/#put-function","text":"This returns the updated map after adding the given key-value pair. Syntax OBJECT map:put( OBJECT map, OBJECT key, OBJECT value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No No key The key of the value added. OBJECT No No value The new value. OBJECT No No Examples EXAMPLE 1 put(students , 1234 , ?sam?) This function returns the updated map named students after adding the object \"sam\" with key 1234.","title":"put (Function)"},{"location":"api/5.0.1/#putall-function","text":"This returns the updated 'to.map' map after copying all of the mappings from the specified 'from.map.' map. If there are duplicate keys, 'from.map' overwrites the values into the 'to.map.' map. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the mappings need to copied. OBJECT No No from.map The map from which the mappings are copied. OBJECT No No Examples EXAMPLE 1 putAll(toMap , fromMap) This returns the updated map named 'toMap' after adding each mapping from 'fromMap.'","title":"putAll (Function)"},{"location":"api/5.0.1/#remove-function","text":"This returns the updated map after removing the element with the key specified. Syntax OBJECT map:remove( OBJECT map, OBJECT key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated by removing the element. OBJECT No No key The key of the element that needs to removed from the map. OBJECT No No Examples EXAMPLE 1 remove(students , 1234) This function returns the updated map, students after removing the element with the key 1234.","title":"remove (Function)"},{"location":"api/5.0.1/#tojson-function","text":"This converts a map into a JSON object and returns the definition of that JSON object as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No No Examples EXAMPLE 1 toJSON(company) If \"company\" is a map with key-value pairs, (\"symbol\" : wso2),(\"volume\" : 100), and (\"price\",200), it returns the string ?{?symbol? : ?wso2?, ?volume? : 100 , ?price? : 200}?.","title":"toJSON (Function)"},{"location":"api/5.0.1/#toxml-function","text":"This returns the map as an XML string. Syntax STRING map:toXML( OBJECT map, OBJECT rootelementname) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No No rootelementname The root element of the map. null OBJECT Yes No Examples EXAMPLE 1 toXML(company, abcCompany ) If \"company\" is a map with key-value pairs, (?symbol? : wso2), (?volume? : 100), and (?price? : 200), this function returns the string, ? abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany .","title":"toXML (Function)"},{"location":"api/5.0.2/","text":"API Docs - v5.0.2 Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. Map create (Function) Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value1 Value 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . createFromJSON (Function) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively. createFromXML (Function) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively. get (Function) Function returns the value corresponding to the given key from the map. Syntax OBJECT map:get( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . isMap (Function) Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(students) Returns 'true' if the students is and an instance of java.util.Map else it returns false . put (Function) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(students , 1234 , 'sam') Function returns the updated map named students after adding the value sam with the key 1234 . putAll (Function) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100). remove (Function) Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(students, 1234) This returns the updated map, students after removing the key-value pair corresponding to the key 1234 . toJSON (Function) Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} . toXML (Function) Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"5.0.2"},{"location":"api/5.0.2/#api-docs-v502","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.2"},{"location":"api/5.0.2/#map","text":"","title":"Map"},{"location":"api/5.0.2/#create-function","text":"Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value1 Value 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three .","title":"create (Function)"},{"location":"api/5.0.2/#createfromjson-function","text":"Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/5.0.2/#createfromxml-function","text":"Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/5.0.2/#get-function","text":"Function returns the value corresponding to the given key from the map. Syntax OBJECT map:get( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null .","title":"get (Function)"},{"location":"api/5.0.2/#ismap-function","text":"Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(students) Returns 'true' if the students is and an instance of java.util.Map else it returns false .","title":"isMap (Function)"},{"location":"api/5.0.2/#put-function","text":"Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(students , 1234 , 'sam') Function returns the updated map named students after adding the value sam with the key 1234 .","title":"put (Function)"},{"location":"api/5.0.2/#putall-function","text":"Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100).","title":"putAll (Function)"},{"location":"api/5.0.2/#remove-function","text":"Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(students, 1234) This returns the updated map, students after removing the key-value pair corresponding to the key 1234 .","title":"remove (Function)"},{"location":"api/5.0.2/#tojson-function","text":"Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} .","title":"toJSON (Function)"},{"location":"api/5.0.2/#toxml-function","text":"Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"toXML (Function)"},{"location":"api/5.0.3/","text":"API Docs - v5.0.3 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Map create (Function) Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value1 Value 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . createFromJSON (Function) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {?symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively. createFromXML (Function) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively. get (Function) Function returns the value corresponding to the given key from the map. Syntax OBJECT map:get( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . isMap (Function) Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(students) Returns 'true' if the students is and an instance of java.util.Map else it returns false . put (Function) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(students , 1234 , 'sam') Function returns the updated map named students after adding the value sam with the key 1234 . putAll (Function) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100). remove (Function) Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(students, 1234) This returns the updated map, students after removing the key-value pair corresponding to the key 1234 . toJSON (Function) Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} . toXML (Function) Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"5.0.3"},{"location":"api/5.0.3/#api-docs-v503","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.3"},{"location":"api/5.0.3/#map","text":"","title":"Map"},{"location":"api/5.0.3/#create-function","text":"Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value1 Value 1 OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three .","title":"create (Function)"},{"location":"api/5.0.3/#createfromjson-function","text":"Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {?symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/5.0.3/#createfromxml-function","text":"Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/5.0.3/#get-function","text":"Function returns the value corresponding to the given key from the map. Syntax OBJECT map:get( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null .","title":"get (Function)"},{"location":"api/5.0.3/#ismap-function","text":"Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(students) Returns 'true' if the students is and an instance of java.util.Map else it returns false .","title":"isMap (Function)"},{"location":"api/5.0.3/#put-function","text":"Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(students , 1234 , 'sam') Function returns the updated map named students after adding the value sam with the key 1234 .","title":"put (Function)"},{"location":"api/5.0.3/#putall-function","text":"Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100).","title":"putAll (Function)"},{"location":"api/5.0.3/#remove-function","text":"Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(students, 1234) This returns the updated map, students after removing the key-value pair corresponding to the key 1234 .","title":"remove (Function)"},{"location":"api/5.0.3/#tojson-function","text":"Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} .","title":"toJSON (Function)"},{"location":"api/5.0.3/#toxml-function","text":"Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"toXML (Function)"},{"location":"api/5.0.4/","text":"API Docs - v5.0.4 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Map create (Function) Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map. createFromJSON (Function) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively. createFromXML (Function) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively. get (Function) Function returns the value corresponding to the given key from the map. Syntax OBJECT map:get( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . isMap (Function) Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(students) Returns 'true' if the students is and an instance of java.util.Map else it returns false . put (Function) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(students , 1234 , 'sam') Function returns the updated map named students after adding the value sam with the key 1234 . putAll (Function) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100). remove (Function) Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(students, 1234) This returns the updated map, students after removing the key-value pair corresponding to the key 1234 . toJSON (Function) Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} . toXML (Function) Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"5.0.4"},{"location":"api/5.0.4/#api-docs-v504","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.4"},{"location":"api/5.0.4/#map","text":"","title":"Map"},{"location":"api/5.0.4/#create-function","text":"Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map.","title":"create (Function)"},{"location":"api/5.0.4/#createfromjson-function","text":"Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/5.0.4/#createfromxml-function","text":"Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/5.0.4/#get-function","text":"Function returns the value corresponding to the given key from the map. Syntax OBJECT map:get( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null .","title":"get (Function)"},{"location":"api/5.0.4/#ismap-function","text":"Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(students) Returns 'true' if the students is and an instance of java.util.Map else it returns false .","title":"isMap (Function)"},{"location":"api/5.0.4/#put-function","text":"Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(students , 1234 , 'sam') Function returns the updated map named students after adding the value sam with the key 1234 .","title":"put (Function)"},{"location":"api/5.0.4/#putall-function","text":"Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100).","title":"putAll (Function)"},{"location":"api/5.0.4/#remove-function","text":"Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(students, 1234) This returns the updated map, students after removing the key-value pair corresponding to the key 1234 .","title":"remove (Function)"},{"location":"api/5.0.4/#tojson-function","text":"Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} .","title":"toJSON (Function)"},{"location":"api/5.0.4/#toxml-function","text":"Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"toXML (Function)"},{"location":"api/5.0.5/","text":"API Docs - v5.0.5 Tested Siddhi Core version: 5.1.4 It could also support other Siddhi Core minor versions. Map collect (Aggregate Function) Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value Syntax OBJECT map:collect( INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key Key of the map entry INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value Value of the map entry OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select map:collect(symbol, price) as stockDetails insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of key and value to a single map and return as stockDetails. merge (Aggregate Function) Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. Syntax OBJECT map:merge( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Maps to be collected OBJECT No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select map:merge(map) as stockDetails insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of map and merge them to a single map, returned as stockDetails. clear (Function) Function returns the cleared map. Syntax OBJECT map:clear( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 map:clear(stockDetails) Returns an empty map. clone (Function) Function returns the cloned map. Syntax OBJECT map:clone( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 map:clone(stockDetails) Function returns cloned map of stockDetails. combineByKey (Function) Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. Syntax OBJECT map:combineByKey( OBJECT map, OBJECT map) OBJECT map:combineByKey( OBJECT map, OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map into which the key-values need to copied. OBJECT No Yes Examples EXAMPLE 1 map:combineByKey(map1, map2) If map2 contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if map2 contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns the map with key value pairs as follows, (symbol: ArrayList('wso2, 'IBM')), (volume: ArrayList(100, null)) and (price: ArrayList(null, 12)) containsKey (Function) Function checks if the map contains the key. Syntax BOOL map:containsKey( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the key or not. OBJECT No Yes key The key to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsKey(stockDetails, '1234') Returns 'true' if the stockDetails map contains key 1234 else it returns false . containsValue (Function) Function checks if the map contains the value. Syntax BOOL map:containsValue( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the value or not. OBJECT No Yes value The value to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsValue(stockDetails, 'IBM') Returns 'true' if the stockDetails map contains value IBM else it returns false . create (Function) Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map. createFromJSON (Function) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively. createFromXML (Function) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively. get (Function) Function returns the value corresponding to the given key from the map. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING default.value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes default.value The value to be returned if the map does not have the key. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . EXAMPLE 3 map:get(companyMap, 2, 'two') If the companyMap does not have any value for key 2 then the function returns two . isEmpty (Function) Function checks if the map is empty. Syntax BOOL map:isEmpty( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the need to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 map:isEmpty(stockDetails) Returns 'true' if the stockDetails map is empty else it returns false . isMap (Function) Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(stockDetails) Returns 'true' if the stockDetails is and an instance of java.util.Map else it returns false . keys (Function) Function to return the keys of the map as a list. Syntax OBJECT map:keys( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list of keys to be returned. OBJECT No Yes Examples EXAMPLE 1 map:keys(stockDetails) Returns keys of the stockDetails map. put (Function) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(stockDetails , 'IBM' , '200') Function returns the updated map named stockDetails after adding the value 200 with the key IBM . putAll (Function) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100). putIfAbsent (Function) Function returns the updated map after adding the given key-value pair if key is absent. Syntax OBJECT map:putIfAbsent( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes value The value to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:putIfAbsent(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after adding the value IBM with the key 1234 if key is absent from the original map. remove (Function) Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(stockDetails, 1234) This returns the updated map, stockDetails after removing the key-value pair corresponding to the key 1234 . replace (Function) Function returns the updated map after replacing the given key-value pair only if key is present. Syntax OBJECT map:replace( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the key-value should be replaced. OBJECT No Yes key The key to be replaced. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be replaced. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:replace(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after replacing the value IBM with the key 1234 if present. replaceAll (Function) Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. Syntax OBJECT map:replaceAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:replaceAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('volume' : 100). size (Function) Function to return the size of the map. Syntax INT map:size( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 map:size(stockDetails) Returns size of the stockDetails map. toJSON (Function) Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} . toXML (Function) Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price . values (Function) Function to return the values of the map. Syntax OBJECT map:values( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list if values to be returned. OBJECT No Yes Examples EXAMPLE 1 map:values(stockDetails) Returns values of the stockDetails map. tokenize (Stream Processor) Tokenize the map and return each key, value as new attributes in events Syntax map:tokenize( OBJECT map) map:tokenize( OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Hash map containing key value pairs OBJECT No Yes Extra Return Attributes Name Description Possible Types key Key of an entry consisted in the map OBJECT value Value of an entry consisted in the map. If more than one map is given, then an Array List of values from each map is returned for the value attribute. OBJECT Examples EXAMPLE 1 define stream StockStream(symbol string, price float); from StockStream#window.lengthBatch(2) select map:collect(symbol, price) as symbolPriceMap insert into TempStream; from TempStream#map:tokenize(customMap) select key, value insert into SymbolStream; Based on the length batch window, symbolPriceMap will collect two events, and the map will then again tokenized to give 2 events with key and values being symbol name and price respectively.","title":"5.0.5"},{"location":"api/5.0.5/#api-docs-v505","text":"Tested Siddhi Core version: 5.1.4 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.5"},{"location":"api/5.0.5/#map","text":"","title":"Map"},{"location":"api/5.0.5/#collect-aggregate-function","text":"Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value Syntax OBJECT map:collect( INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key Key of the map entry INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value Value of the map entry OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select map:collect(symbol, price) as stockDetails insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of key and value to a single map and return as stockDetails.","title":"collect (Aggregate Function)"},{"location":"api/5.0.5/#merge-aggregate-function","text":"Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. Syntax OBJECT map:merge( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Maps to be collected OBJECT No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select map:merge(map) as stockDetails insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of map and merge them to a single map, returned as stockDetails.","title":"merge (Aggregate Function)"},{"location":"api/5.0.5/#clear-function","text":"Function returns the cleared map. Syntax OBJECT map:clear( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 map:clear(stockDetails) Returns an empty map.","title":"clear (Function)"},{"location":"api/5.0.5/#clone-function","text":"Function returns the cloned map. Syntax OBJECT map:clone( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 map:clone(stockDetails) Function returns cloned map of stockDetails.","title":"clone (Function)"},{"location":"api/5.0.5/#combinebykey-function","text":"Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. Syntax OBJECT map:combineByKey( OBJECT map, OBJECT map) OBJECT map:combineByKey( OBJECT map, OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map into which the key-values need to copied. OBJECT No Yes Examples EXAMPLE 1 map:combineByKey(map1, map2) If map2 contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if map2 contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns the map with key value pairs as follows, (symbol: ArrayList('wso2, 'IBM')), (volume: ArrayList(100, null)) and (price: ArrayList(null, 12))","title":"combineByKey (Function)"},{"location":"api/5.0.5/#containskey-function","text":"Function checks if the map contains the key. Syntax BOOL map:containsKey( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the key or not. OBJECT No Yes key The key to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsKey(stockDetails, '1234') Returns 'true' if the stockDetails map contains key 1234 else it returns false .","title":"containsKey (Function)"},{"location":"api/5.0.5/#containsvalue-function","text":"Function checks if the map contains the value. Syntax BOOL map:containsValue( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the value or not. OBJECT No Yes value The value to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsValue(stockDetails, 'IBM') Returns 'true' if the stockDetails map contains value IBM else it returns false .","title":"containsValue (Function)"},{"location":"api/5.0.5/#create-function","text":"Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map.","title":"create (Function)"},{"location":"api/5.0.5/#createfromjson-function","text":"Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/5.0.5/#createfromxml-function","text":"Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/5.0.5/#get-function","text":"Function returns the value corresponding to the given key from the map. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING default.value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes default.value The value to be returned if the map does not have the key. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . EXAMPLE 3 map:get(companyMap, 2, 'two') If the companyMap does not have any value for key 2 then the function returns two .","title":"get (Function)"},{"location":"api/5.0.5/#isempty-function","text":"Function checks if the map is empty. Syntax BOOL map:isEmpty( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the need to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 map:isEmpty(stockDetails) Returns 'true' if the stockDetails map is empty else it returns false .","title":"isEmpty (Function)"},{"location":"api/5.0.5/#ismap-function","text":"Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(stockDetails) Returns 'true' if the stockDetails is and an instance of java.util.Map else it returns false .","title":"isMap (Function)"},{"location":"api/5.0.5/#keys-function","text":"Function to return the keys of the map as a list. Syntax OBJECT map:keys( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list of keys to be returned. OBJECT No Yes Examples EXAMPLE 1 map:keys(stockDetails) Returns keys of the stockDetails map.","title":"keys (Function)"},{"location":"api/5.0.5/#put-function","text":"Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(stockDetails , 'IBM' , '200') Function returns the updated map named stockDetails after adding the value 200 with the key IBM .","title":"put (Function)"},{"location":"api/5.0.5/#putall-function","text":"Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100).","title":"putAll (Function)"},{"location":"api/5.0.5/#putifabsent-function","text":"Function returns the updated map after adding the given key-value pair if key is absent. Syntax OBJECT map:putIfAbsent( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes value The value to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:putIfAbsent(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after adding the value IBM with the key 1234 if key is absent from the original map.","title":"putIfAbsent (Function)"},{"location":"api/5.0.5/#remove-function","text":"Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(stockDetails, 1234) This returns the updated map, stockDetails after removing the key-value pair corresponding to the key 1234 .","title":"remove (Function)"},{"location":"api/5.0.5/#replace-function","text":"Function returns the updated map after replacing the given key-value pair only if key is present. Syntax OBJECT map:replace( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the key-value should be replaced. OBJECT No Yes key The key to be replaced. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be replaced. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:replace(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after replacing the value IBM with the key 1234 if present.","title":"replace (Function)"},{"location":"api/5.0.5/#replaceall-function","text":"Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. Syntax OBJECT map:replaceAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:replaceAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('volume' : 100).","title":"replaceAll (Function)"},{"location":"api/5.0.5/#size-function","text":"Function to return the size of the map. Syntax INT map:size( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 map:size(stockDetails) Returns size of the stockDetails map.","title":"size (Function)"},{"location":"api/5.0.5/#tojson-function","text":"Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} .","title":"toJSON (Function)"},{"location":"api/5.0.5/#toxml-function","text":"Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"toXML (Function)"},{"location":"api/5.0.5/#values-function","text":"Function to return the values of the map. Syntax OBJECT map:values( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list if values to be returned. OBJECT No Yes Examples EXAMPLE 1 map:values(stockDetails) Returns values of the stockDetails map.","title":"values (Function)"},{"location":"api/5.0.5/#tokenize-stream-processor","text":"Tokenize the map and return each key, value as new attributes in events Syntax map:tokenize( OBJECT map) map:tokenize( OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Hash map containing key value pairs OBJECT No Yes Extra Return Attributes Name Description Possible Types key Key of an entry consisted in the map OBJECT value Value of an entry consisted in the map. If more than one map is given, then an Array List of values from each map is returned for the value attribute. OBJECT Examples EXAMPLE 1 define stream StockStream(symbol string, price float); from StockStream#window.lengthBatch(2) select map:collect(symbol, price) as symbolPriceMap insert into TempStream; from TempStream#map:tokenize(customMap) select key, value insert into SymbolStream; Based on the length batch window, symbolPriceMap will collect two events, and the map will then again tokenized to give 2 events with key and values being symbol name and price respectively.","title":"tokenize (Stream Processor)"},{"location":"api/5.0.6/","text":"API Docs - v5.0.6 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Map collect (Aggregate Function) Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value Syntax OBJECT map:collect( INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key Key of the map entry INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value Value of the map entry OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select map:collect(symbol, price) as stockDetails insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of key and value to a single map and return as stockDetails. merge (Aggregate Function) Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. Syntax OBJECT map:merge( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Maps to be collected OBJECT No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select map:merge(map) as stockDetails insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of map and merge them to a single map, returned as stockDetails. clear (Function) Function returns the cleared map. Syntax OBJECT map:clear( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 map:clear(stockDetails) Returns an empty map. clone (Function) Function returns the cloned map. Syntax OBJECT map:clone( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 map:clone(stockDetails) Function returns cloned map of stockDetails. combineByKey (Function) Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. Syntax OBJECT map:combineByKey( OBJECT map, OBJECT map) OBJECT map:combineByKey( OBJECT map, OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map into which the key-values need to copied. OBJECT No Yes Examples EXAMPLE 1 map:combineByKey(map1, map2) If map2 contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if map2 contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns the map with key value pairs as follows, (symbol: ArrayList('wso2, 'IBM')), (volume: ArrayList(100, null)) and (price: ArrayList(null, 12)) containsKey (Function) Function checks if the map contains the key. Syntax BOOL map:containsKey( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the key or not. OBJECT No Yes key The key to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsKey(stockDetails, '1234') Returns 'true' if the stockDetails map contains key 1234 else it returns false . containsValue (Function) Function checks if the map contains the value. Syntax BOOL map:containsValue( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the value or not. OBJECT No Yes value The value to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsValue(stockDetails, 'IBM') Returns 'true' if the stockDetails map contains value IBM else it returns false . create (Function) Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map. createFromJSON (Function) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively. createFromXML (Function) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively. get (Function) Function returns the value corresponding to the given key from the map. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING default.value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes default.value The value to be returned if the map does not have the key. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . EXAMPLE 3 map:get(companyMap, 2, 'two') If the companyMap does not have any value for key 2 then the function returns two . isEmpty (Function) Function checks if the map is empty. Syntax BOOL map:isEmpty( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the need to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 map:isEmpty(stockDetails) Returns 'true' if the stockDetails map is empty else it returns false . isMap (Function) Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(stockDetails) Returns 'true' if the stockDetails is and an instance of java.util.Map else it returns false . keys (Function) Function to return the keys of the map as a list. Syntax OBJECT map:keys( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list of keys to be returned. OBJECT No Yes Examples EXAMPLE 1 map:keys(stockDetails) Returns keys of the stockDetails map. put (Function) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(stockDetails , 'IBM' , '200') Function returns the updated map named stockDetails after adding the value 200 with the key IBM . putAll (Function) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100). putIfAbsent (Function) Function returns the updated map after adding the given key-value pair if key is absent. Syntax OBJECT map:putIfAbsent( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes value The value to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:putIfAbsent(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after adding the value IBM with the key 1234 if key is absent from the original map. remove (Function) Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(stockDetails, 1234) This returns the updated map, stockDetails after removing the key-value pair corresponding to the key 1234 . replace (Function) Function returns the updated map after replacing the given key-value pair only if key is present. Syntax OBJECT map:replace( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the key-value should be replaced. OBJECT No Yes key The key to be replaced. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be replaced. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:replace(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after replacing the value IBM with the key 1234 if present. replaceAll (Function) Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. Syntax OBJECT map:replaceAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:replaceAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('volume' : 100). size (Function) Function to return the size of the map. Syntax INT map:size( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 map:size(stockDetails) Returns size of the stockDetails map. toJSON (Function) Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} . toXML (Function) Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price . values (Function) Function to return the values of the map. Syntax OBJECT map:values( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list if values to be returned. OBJECT No Yes Examples EXAMPLE 1 map:values(stockDetails) Returns values of the stockDetails map. tokenize (Stream Processor) Tokenize the map and return each key, value as new attributes in events Syntax map:tokenize( OBJECT map) map:tokenize( OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Hash map containing key value pairs OBJECT No Yes Extra Return Attributes Name Description Possible Types key Key of an entry consisted in the map OBJECT value Value of an entry consisted in the map. If more than one map is given, then an Array List of values from each map is returned for the value attribute. OBJECT Examples EXAMPLE 1 define stream StockStream(symbol string, price float); from StockStream#window.lengthBatch(2) select map:collect(symbol, price) as symbolPriceMap insert into TempStream; from TempStream#map:tokenize(customMap) select key, value insert into SymbolStream; Based on the length batch window, symbolPriceMap will collect two events, and the map will then again tokenized to give 2 events with key and values being symbol name and price respectively.","title":"5.0.6"},{"location":"api/5.0.6/#api-docs-v506","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.6"},{"location":"api/5.0.6/#map","text":"","title":"Map"},{"location":"api/5.0.6/#collect-aggregate-function","text":"Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value Syntax OBJECT map:collect( INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key Key of the map entry INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value Value of the map entry OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select map:collect(symbol, price) as stockDetails insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of key and value to a single map and return as stockDetails.","title":"collect (Aggregate Function)"},{"location":"api/5.0.6/#merge-aggregate-function","text":"Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. Syntax OBJECT map:merge( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Maps to be collected OBJECT No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select map:merge(map) as stockDetails insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of map and merge them to a single map, returned as stockDetails.","title":"merge (Aggregate Function)"},{"location":"api/5.0.6/#clear-function","text":"Function returns the cleared map. Syntax OBJECT map:clear( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 map:clear(stockDetails) Returns an empty map.","title":"clear (Function)"},{"location":"api/5.0.6/#clone-function","text":"Function returns the cloned map. Syntax OBJECT map:clone( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 map:clone(stockDetails) Function returns cloned map of stockDetails.","title":"clone (Function)"},{"location":"api/5.0.6/#combinebykey-function","text":"Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. Syntax OBJECT map:combineByKey( OBJECT map, OBJECT map) OBJECT map:combineByKey( OBJECT map, OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map into which the key-values need to copied. OBJECT No Yes Examples EXAMPLE 1 map:combineByKey(map1, map2) If map2 contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if map2 contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns the map with key value pairs as follows, (symbol: ArrayList('wso2, 'IBM')), (volume: ArrayList(100, null)) and (price: ArrayList(null, 12))","title":"combineByKey (Function)"},{"location":"api/5.0.6/#containskey-function","text":"Function checks if the map contains the key. Syntax BOOL map:containsKey( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the key or not. OBJECT No Yes key The key to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsKey(stockDetails, '1234') Returns 'true' if the stockDetails map contains key 1234 else it returns false .","title":"containsKey (Function)"},{"location":"api/5.0.6/#containsvalue-function","text":"Function checks if the map contains the value. Syntax BOOL map:containsValue( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the value or not. OBJECT No Yes value The value to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsValue(stockDetails, 'IBM') Returns 'true' if the stockDetails map contains value IBM else it returns false .","title":"containsValue (Function)"},{"location":"api/5.0.6/#create-function","text":"Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map.","title":"create (Function)"},{"location":"api/5.0.6/#createfromjson-function","text":"Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/5.0.6/#createfromxml-function","text":"Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/5.0.6/#get-function","text":"Function returns the value corresponding to the given key from the map. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING default.value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes default.value The value to be returned if the map does not have the key. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . EXAMPLE 3 map:get(companyMap, 2, 'two') If the companyMap does not have any value for key 2 then the function returns two .","title":"get (Function)"},{"location":"api/5.0.6/#isempty-function","text":"Function checks if the map is empty. Syntax BOOL map:isEmpty( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the need to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 map:isEmpty(stockDetails) Returns 'true' if the stockDetails map is empty else it returns false .","title":"isEmpty (Function)"},{"location":"api/5.0.6/#ismap-function","text":"Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(stockDetails) Returns 'true' if the stockDetails is and an instance of java.util.Map else it returns false .","title":"isMap (Function)"},{"location":"api/5.0.6/#keys-function","text":"Function to return the keys of the map as a list. Syntax OBJECT map:keys( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list of keys to be returned. OBJECT No Yes Examples EXAMPLE 1 map:keys(stockDetails) Returns keys of the stockDetails map.","title":"keys (Function)"},{"location":"api/5.0.6/#put-function","text":"Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(stockDetails , 'IBM' , '200') Function returns the updated map named stockDetails after adding the value 200 with the key IBM .","title":"put (Function)"},{"location":"api/5.0.6/#putall-function","text":"Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100).","title":"putAll (Function)"},{"location":"api/5.0.6/#putifabsent-function","text":"Function returns the updated map after adding the given key-value pair if key is absent. Syntax OBJECT map:putIfAbsent( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes value The value to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:putIfAbsent(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after adding the value IBM with the key 1234 if key is absent from the original map.","title":"putIfAbsent (Function)"},{"location":"api/5.0.6/#remove-function","text":"Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(stockDetails, 1234) This returns the updated map, stockDetails after removing the key-value pair corresponding to the key 1234 .","title":"remove (Function)"},{"location":"api/5.0.6/#replace-function","text":"Function returns the updated map after replacing the given key-value pair only if key is present. Syntax OBJECT map:replace( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the key-value should be replaced. OBJECT No Yes key The key to be replaced. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be replaced. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:replace(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after replacing the value IBM with the key 1234 if present.","title":"replace (Function)"},{"location":"api/5.0.6/#replaceall-function","text":"Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. Syntax OBJECT map:replaceAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:replaceAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('volume' : 100).","title":"replaceAll (Function)"},{"location":"api/5.0.6/#size-function","text":"Function to return the size of the map. Syntax INT map:size( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 map:size(stockDetails) Returns size of the stockDetails map.","title":"size (Function)"},{"location":"api/5.0.6/#tojson-function","text":"Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} .","title":"toJSON (Function)"},{"location":"api/5.0.6/#toxml-function","text":"Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"toXML (Function)"},{"location":"api/5.0.6/#values-function","text":"Function to return the values of the map. Syntax OBJECT map:values( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list if values to be returned. OBJECT No Yes Examples EXAMPLE 1 map:values(stockDetails) Returns values of the stockDetails map.","title":"values (Function)"},{"location":"api/5.0.6/#tokenize-stream-processor","text":"Tokenize the map and return each key, value as new attributes in events Syntax map:tokenize( OBJECT map) map:tokenize( OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Hash map containing key value pairs OBJECT No Yes Extra Return Attributes Name Description Possible Types key Key of an entry consisted in the map OBJECT value Value of an entry consisted in the map. If more than one map is given, then an Array List of values from each map is returned for the value attribute. OBJECT Examples EXAMPLE 1 define stream StockStream(symbol string, price float); from StockStream#window.lengthBatch(2) select map:collect(symbol, price) as symbolPriceMap insert into TempStream; from TempStream#map:tokenize(customMap) select key, value insert into SymbolStream; Based on the length batch window, symbolPriceMap will collect two events, and the map will then again tokenized to give 2 events with key and values being symbol name and price respectively.","title":"tokenize (Stream Processor)"},{"location":"api/latest/","text":"API Docs - v5.0.6 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Map collect (Aggregate Function) Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value Syntax OBJECT map:collect( INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key Key of the map entry INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value Value of the map entry OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select map:collect(symbol, price) as stockDetails insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of key and value to a single map and return as stockDetails. merge (Aggregate Function) Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. Syntax OBJECT map:merge( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Maps to be collected OBJECT No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select map:merge(map) as stockDetails insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of map and merge them to a single map, returned as stockDetails. clear (Function) Function returns the cleared map. Syntax OBJECT map:clear( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 map:clear(stockDetails) Returns an empty map. clone (Function) Function returns the cloned map. Syntax OBJECT map:clone( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 map:clone(stockDetails) Function returns cloned map of stockDetails. combineByKey (Function) Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. Syntax OBJECT map:combineByKey( OBJECT map, OBJECT map) OBJECT map:combineByKey( OBJECT map, OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map into which the key-values need to copied. OBJECT No Yes Examples EXAMPLE 1 map:combineByKey(map1, map2) If map2 contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if map2 contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns the map with key value pairs as follows, (symbol: ArrayList('wso2, 'IBM')), (volume: ArrayList(100, null)) and (price: ArrayList(null, 12)) containsKey (Function) Function checks if the map contains the key. Syntax BOOL map:containsKey( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the key or not. OBJECT No Yes key The key to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsKey(stockDetails, '1234') Returns 'true' if the stockDetails map contains key 1234 else it returns false . containsValue (Function) Function checks if the map contains the value. Syntax BOOL map:containsValue( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the value or not. OBJECT No Yes value The value to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsValue(stockDetails, 'IBM') Returns 'true' if the stockDetails map contains value IBM else it returns false . create (Function) Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map. createFromJSON (Function) Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively. createFromXML (Function) Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively. get (Function) Function returns the value corresponding to the given key from the map. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING default.value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes default.value The value to be returned if the map does not have the key. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . EXAMPLE 3 map:get(companyMap, 2, 'two') If the companyMap does not have any value for key 2 then the function returns two . isEmpty (Function) Function checks if the map is empty. Syntax BOOL map:isEmpty( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the need to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 map:isEmpty(stockDetails) Returns 'true' if the stockDetails map is empty else it returns false . isMap (Function) Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(stockDetails) Returns 'true' if the stockDetails is and an instance of java.util.Map else it returns false . keys (Function) Function to return the keys of the map as a list. Syntax OBJECT map:keys( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list of keys to be returned. OBJECT No Yes Examples EXAMPLE 1 map:keys(stockDetails) Returns keys of the stockDetails map. put (Function) Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(stockDetails , 'IBM' , '200') Function returns the updated map named stockDetails after adding the value 200 with the key IBM . putAll (Function) Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100). putIfAbsent (Function) Function returns the updated map after adding the given key-value pair if key is absent. Syntax OBJECT map:putIfAbsent( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes value The value to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:putIfAbsent(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after adding the value IBM with the key 1234 if key is absent from the original map. remove (Function) Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(stockDetails, 1234) This returns the updated map, stockDetails after removing the key-value pair corresponding to the key 1234 . replace (Function) Function returns the updated map after replacing the given key-value pair only if key is present. Syntax OBJECT map:replace( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the key-value should be replaced. OBJECT No Yes key The key to be replaced. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be replaced. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:replace(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after replacing the value IBM with the key 1234 if present. replaceAll (Function) Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. Syntax OBJECT map:replaceAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:replaceAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('volume' : 100). size (Function) Function to return the size of the map. Syntax INT map:size( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 map:size(stockDetails) Returns size of the stockDetails map. toJSON (Function) Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} . toXML (Function) Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price . values (Function) Function to return the values of the map. Syntax OBJECT map:values( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list if values to be returned. OBJECT No Yes Examples EXAMPLE 1 map:values(stockDetails) Returns values of the stockDetails map. tokenize (Stream Processor) Tokenize the map and return each key, value as new attributes in events Syntax map:tokenize( OBJECT map) map:tokenize( OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Hash map containing key value pairs OBJECT No Yes Extra Return Attributes Name Description Possible Types key Key of an entry consisted in the map OBJECT value Value of an entry consisted in the map. If more than one map is given, then an Array List of values from each map is returned for the value attribute. OBJECT Examples EXAMPLE 1 define stream StockStream(symbol string, price float); from StockStream#window.lengthBatch(2) select map:collect(symbol, price) as symbolPriceMap insert into TempStream; from TempStream#map:tokenize(customMap) select key, value insert into SymbolStream; Based on the length batch window, symbolPriceMap will collect two events, and the map will then again tokenized to give 2 events with key and values being symbol name and price respectively.","title":"latest"},{"location":"api/latest/#api-docs-v506","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.6"},{"location":"api/latest/#map","text":"","title":"Map"},{"location":"api/latest/#collect-aggregate-function","text":"Collect multiple key-value pairs to construct a map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value Syntax OBJECT map:collect( INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key Key of the map entry INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value Value of the map entry OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select map:collect(symbol, price) as stockDetails insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of key and value to a single map and return as stockDetails.","title":"collect (Aggregate Function)"},{"location":"api/latest/#merge-aggregate-function","text":"Collect multiple maps to merge as a single map. Only distinct keys are collected, if a duplicate key arrives, it overrides the old value. Syntax OBJECT map:merge( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Maps to be collected OBJECT No Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select map:merge(map) as stockDetails insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of map and merge them to a single map, returned as stockDetails.","title":"merge (Aggregate Function)"},{"location":"api/latest/#clear-function","text":"Function returns the cleared map. Syntax OBJECT map:clear( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 map:clear(stockDetails) Returns an empty map.","title":"clear (Function)"},{"location":"api/latest/#clone-function","text":"Function returns the cloned map. Syntax OBJECT map:clone( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 map:clone(stockDetails) Function returns cloned map of stockDetails.","title":"clone (Function)"},{"location":"api/latest/#combinebykey-function","text":"Function returns the map after combining all the maps given as parameters, such that the keys, of all the maps will be matched with an Array list of values from each map respectively. Syntax OBJECT map:combineByKey( OBJECT map, OBJECT map) OBJECT map:combineByKey( OBJECT map, OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map into which the key-values need to copied. OBJECT No Yes Examples EXAMPLE 1 map:combineByKey(map1, map2) If map2 contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if map2 contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns the map with key value pairs as follows, (symbol: ArrayList('wso2, 'IBM')), (volume: ArrayList(100, null)) and (price: ArrayList(null, 12))","title":"combineByKey (Function)"},{"location":"api/latest/#containskey-function","text":"Function checks if the map contains the key. Syntax BOOL map:containsKey( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the key or not. OBJECT No Yes key The key to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsKey(stockDetails, '1234') Returns 'true' if the stockDetails map contains key 1234 else it returns false .","title":"containsKey (Function)"},{"location":"api/latest/#containsvalue-function","text":"Function checks if the map contains the value. Syntax BOOL map:containsValue( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the needs to be checked on containing the value or not. OBJECT No Yes value The value to be checked. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:containsValue(stockDetails, 'IBM') Returns 'true' if the stockDetails map contains value IBM else it returns false .","title":"containsValue (Function)"},{"location":"api/latest/#create-function","text":"Function creates a map pairing the keys and their corresponding values. Syntax OBJECT map:create() OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1) OBJECT map:create( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key1 Key 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes value1 Value 1 - OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:create(1, 'one', 2, 'two', 3, 'three') This returns a map with keys 1 , 2 , 3 mapped with their corresponding values, one , two , three . EXAMPLE 2 map:create() This returns an empty map.","title":"create (Function)"},{"location":"api/latest/#createfromjson-function","text":"Function returns the map created by pairing the keys with their corresponding values given in the JSON string. Syntax OBJECT map:createFromJSON( STRING json.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json.string JSON as a string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromJSON( {\u2018symbol' : 'IBM', 'price' : 200, 'volume' : 100} ) This returns a map with the keys symbol , price , and volume , and their values, IBM , 200 and 100 respectively.","title":"createFromJSON (Function)"},{"location":"api/latest/#createfromxml-function","text":"Function returns the map created by pairing the keys with their corresponding values,given as an XML string. Syntax OBJECT map:createFromXML( STRING xml.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic xml.string The XML string, which is used to create the map. STRING No Yes Examples EXAMPLE 1 map:createFromXML( stock symbol IBM /symbol price 200 /price volume 100 /volume /stock ) This returns a map with the keys symbol , price , volume , and with their values IBM , 200 and 100 respectively.","title":"createFromXML (Function)"},{"location":"api/latest/#get-function","text":"Function returns the value corresponding to the given key from the map. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING map:get( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING default.value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from where the value should be obtained. OBJECT No Yes key The key to fetch the value. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes default.value The value to be returned if the map does not have the key. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING Yes Yes Examples EXAMPLE 1 map:get(companyMap, 1) If the companyMap has key 1 and value ABC in it's set of key value pairs. The function returns ABC . EXAMPLE 2 map:get(companyMap, 2) If the companyMap does not have any value for key 2 then the function returns null . EXAMPLE 3 map:get(companyMap, 2, 'two') If the companyMap does not have any value for key 2 then the function returns two .","title":"get (Function)"},{"location":"api/latest/#isempty-function","text":"Function checks if the map is empty. Syntax BOOL map:isEmpty( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map the need to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 map:isEmpty(stockDetails) Returns 'true' if the stockDetails map is empty else it returns false .","title":"isEmpty (Function)"},{"location":"api/latest/#ismap-function","text":"Function checks if the object is type of a map. Syntax BOOL map:isMap( OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a map or not. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:isMap(stockDetails) Returns 'true' if the stockDetails is and an instance of java.util.Map else it returns false .","title":"isMap (Function)"},{"location":"api/latest/#keys-function","text":"Function to return the keys of the map as a list. Syntax OBJECT map:keys( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list of keys to be returned. OBJECT No Yes Examples EXAMPLE 1 map:keys(stockDetails) Returns keys of the stockDetails map.","title":"keys (Function)"},{"location":"api/latest/#put-function","text":"Function returns the updated map after adding the given key-value pair. If the key already exist in the map the key is updated with the new value. Syntax OBJECT map:put( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:put(stockDetails , 'IBM' , '200') Function returns the updated map named stockDetails after adding the value 200 with the key IBM .","title":"put (Function)"},{"location":"api/latest/#putall-function","text":"Function returns the updated map after adding all the key-value pairs from another map. If there are duplicate keys, the key will be assigned new values from the map that's being copied. Syntax OBJECT map:putAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:putAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('price' : 12), ('volume' : 100).","title":"putAll (Function)"},{"location":"api/latest/#putifabsent-function","text":"Function returns the updated map after adding the given key-value pair if key is absent. Syntax OBJECT map:putIfAbsent( OBJECT map, INT|LONG|FLOAT|DOUBLE|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the value should be added. OBJECT No Yes key The key to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes value The value to be added. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:putIfAbsent(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after adding the value IBM with the key 1234 if key is absent from the original map.","title":"putIfAbsent (Function)"},{"location":"api/latest/#remove-function","text":"Function returns the updated map after removing the element with the specified key. Syntax OBJECT map:remove( OBJECT map, OBJECT|INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be updated. OBJECT No Yes key The key of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes Examples EXAMPLE 1 map:remove(stockDetails, 1234) This returns the updated map, stockDetails after removing the key-value pair corresponding to the key 1234 .","title":"remove (Function)"},{"location":"api/latest/#replace-function","text":"Function returns the updated map after replacing the given key-value pair only if key is present. Syntax OBJECT map:replace( OBJECT map, INT|LONG|FLOAT|DOUBLE|FLOAT|BOOL|STRING key, INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map to which the key-value should be replaced. OBJECT No Yes key The key to be replaced. INT LONG FLOAT DOUBLE FLOAT BOOL STRING No Yes value The value to be replaced. INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 map:replace(stockDetails , 1234 , 'IBM') Function returns the updated map named stockDetails after replacing the value IBM with the key 1234 if present.","title":"replace (Function)"},{"location":"api/latest/#replaceall-function","text":"Function returns the updated map after replacing all the key-value pairs from another map, if keys are present. Syntax OBJECT map:replaceAll( OBJECT to.map, OBJECT from.map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.map The map into which the key-values need to copied. OBJECT No Yes from.map The map from which the key-values are copied. OBJECT No Yes Examples EXAMPLE 1 map:replaceAll(toMap, fromMap) If toMap contains key-value pairs ('symbol': 'wso2'), ('volume' : 100), and if fromMap contains key-value pairs ('symbol': 'IBM'), ('price' : 12), then the function returns updated toMap with key-value pairs ('symbol': 'IBM'), ('volume' : 100).","title":"replaceAll (Function)"},{"location":"api/latest/#size-function","text":"Function to return the size of the map. Syntax INT map:size( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 map:size(stockDetails) Returns size of the stockDetails map.","title":"size (Function)"},{"location":"api/latest/#tojson-function","text":"Function converts a map into a JSON object and returns the JSON as a string. Syntax STRING map:toJSON( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to JSON OBJECT No Yes Examples EXAMPLE 1 map:toJSON(company) If company is a map with key-value pairs, ('symbol': 'wso2'),('volume' : 100), and ('price', 200), it returns the JSON string {\"symbol\" : \"wso2\", \"volume\" : 100 , \"price\" : 200} .","title":"toJSON (Function)"},{"location":"api/latest/#toxml-function","text":"Function returns the map as an XML string. Syntax STRING map:toXML( OBJECT map) STRING map:toXML( OBJECT map, OBJECT|STRING root.element.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map that needs to be converted to XML. OBJECT No Yes root.element.name The root element of the map. The XML root element will be ignored OBJECT STRING Yes Yes Examples EXAMPLE 1 toXML(company, 'abcCompany') If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML as a string, abcCompany symbol wso2 /symbol volume 100 /volume price 200 /price /abcCompany . EXAMPLE 2 toXML(company) If company is a map with key-value pairs, ('symbol' : 'wso2'), ('volume' : 100), and ('price' : 200), this function returns XML without root element as a string, symbol wso2 /symbol volume 100 /volume price 200 /price .","title":"toXML (Function)"},{"location":"api/latest/#values-function","text":"Function to return the values of the map. Syntax OBJECT map:values( OBJECT map) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map The map from which list if values to be returned. OBJECT No Yes Examples EXAMPLE 1 map:values(stockDetails) Returns values of the stockDetails map.","title":"values (Function)"},{"location":"api/latest/#tokenize-stream-processor","text":"Tokenize the map and return each key, value as new attributes in events Syntax map:tokenize( OBJECT map) map:tokenize( OBJECT map, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic map Hash map containing key value pairs OBJECT No Yes Extra Return Attributes Name Description Possible Types key Key of an entry consisted in the map OBJECT value Value of an entry consisted in the map. If more than one map is given, then an Array List of values from each map is returned for the value attribute. OBJECT Examples EXAMPLE 1 define stream StockStream(symbol string, price float); from StockStream#window.lengthBatch(2) select map:collect(symbol, price) as symbolPriceMap insert into TempStream; from TempStream#map:tokenize(customMap) select key, value insert into SymbolStream; Based on the length batch window, symbolPriceMap will collect two events, and the map will then again tokenized to give 2 events with key and values being symbol name and price respectively.","title":"tokenize (Stream Processor)"}]}